#include <Keypad.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>
#include <Adafruit_PN532.h>

// LCD setup
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Keypad setup
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

// Adjusted pins to avoid conflicts with NFC module
byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 12, 11}; // Changed pins to avoid conflict with NFC

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// Password management
String masterPassword = "1234";
String tempPasswords[10]; // Store up to 10 temporary passwords
int tempPasswordCount = 0;
String inputPassword = "";
const int LED_PIN = 13;

// NFC setup
#define IRQ_PIN 2
#define RESET_PIN 3
Adafruit_PN532 nfc(IRQ_PIN, RESET_PIN);
uint8_t keyA[6] = {0xD3, 0xF7, 0xD3, 0xF7, 0xD3, 0xF7};
uint8_t uid[7]; // Buffer to store the returned UID
uint8_t uidLength;

void setup() {
  Serial.begin(9600);
  pinMode(LED_PIN, OUTPUT);
  
  // LCD initialization
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Password:");
  
  Serial.println("Arduino started and ready!");

  // NFC initialization
  nfc.begin();
  uint32_t versiondata = nfc.getFirmwareVersion();
  if (!versiondata) {
    Serial.println("PN532 not found");
    while (1); // halt
  }
  nfc.SAMConfig();
  Serial.println("NFC ready");
}

void clearInputDisplay() {
  lcd.setCursor(0, 1);
  lcd.print("                ");
  lcd.setCursor(0, 1);
}

void loop() {
  // Handle Serial commands for setting and expiring passwords
  if (Serial.available() > 0) {
    String received = Serial.readStringUntil('\n');
    received.trim();
    
    if (received.startsWith("SET_PASSWORD:")) {
      String newPassword = received.substring(13);
      if (newPassword.length() == 6) {
        // Add password to the array
        bool alreadyExists = false;
        for (int i = 0; i < tempPasswordCount; i++) {
          if (tempPasswords[i] == newPassword) {
            alreadyExists = true;
            break;
          }
        }
        
        if (!alreadyExists && tempPasswordCount < 10) {
          tempPasswords[tempPasswordCount] = newPassword;
          tempPasswordCount++;
          Serial.println("NEW_PASSWORD_ADDED:" + newPassword);
          
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("New Pass Set!");
          lcd.setCursor(0, 1);
          lcd.print(newPassword);
          delay(1000);
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Password:");
          clearInputDisplay();
          
          blinkLED(3);
        }
      }
    } else if (received.startsWith("EXPIRE_PASSWORD:")) {
      String expiredPassword = received.substring(16);
      // Remove expired password
      for (int i = 0; i < tempPasswordCount; i++) {
        if (tempPasswords[i] == expiredPassword) {
          // Shift the array to remove the password
          for (int j = i; j < tempPasswordCount - 1; j++) {
            tempPasswords[j] = tempPasswords[j + 1];
          }
          tempPasswordCount--;
          Serial.println("PASSWORD_EXPIRED:" + expiredPassword);
          break;
        }
      }
    }
  }

  // Handle keypad input
  char key = keypad.getKey();
  
  if (key) {
    if (key == 'D') {
      checkPassword(inputPassword);
      inputPassword = "";
    } else if (key == 'C') {
      inputPassword = "";
      Serial.println("Input cleared");
      clearInputDisplay();
    } else if (key == 'A' || key == 'B' || key == '#' || key == '*') {
      // Ignore these keys
    } else {
      inputPassword += key;
      Serial.print("Current input: ");
      Serial.println(inputPassword);
      
      clearInputDisplay();
      lcd.setCursor(0, 1);
      lcd.print(inputPassword);
    }
  }

  // Check for NFC tags
  checkNFC();
}

// Function to check and process NFC tags
void checkNFC() {
  if (nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength)) {
    uint8_t data[16];
    String nfcData = "";
    if (nfc.mifareclassic_AuthenticateBlock(uid, uidLength, 4, 0, keyA)) {
      if (nfc.mifareclassic_ReadDataBlock(4, data)) {
        // Extract the data from the NFC tag
        nfcData = "";
        for (int i = 0; i < 16; i++) {
          if (data[i] >= 32 && data[i] <= 126) {
            nfcData += (char)data[i];
          }
        }
        Serial.println("NFC data: " + nfcData);

        // Process the NFC data as a password
        checkPassword(nfcData);
      }
    }
    delay(1000); // Short delay after reading a tag
  }
}

// Function to check the entered password
void checkPassword(String enteredPassword) {
  bool accessGranted = false;
  String usedPassword = "";
  
  // Check master password
  if (enteredPassword == masterPassword) {
    accessGranted = true;
  } else {
    // Check temporary passwords
    for (int i = 0; i < tempPasswordCount; i++) {
      if (enteredPassword == tempPasswords[i]) {
        accessGranted = true;
        usedPassword = tempPasswords[i];
        
        // Remove used password
        for (int j = i; j < tempPasswordCount - 1; j++) {
          tempPasswords[j] = tempPasswords[j + 1];
        }
        tempPasswordCount--;

        // Notify server
        Serial.println("PASSWORD_USED:" + usedPassword);
        break;
      }
    }
  }

  if (accessGranted) {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Door Opened!!");
    blinkLED(2);
    delay(1500);
  } else {
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Access Denied!");
    Serial.println("ACCESS_DENIED:" + enteredPassword);
    blinkLED(1);
    delay(1500);
  }

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Password:");
  clearInputDisplay();
}

// Function to blink the LED
void blinkLED(int times) {
  for(int i = 0; i < times; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}
