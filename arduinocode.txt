#include <Keypad.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3, 2};

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

String masterPassword = "1234";
String tempPasswords[10]; // 최대 10개의 임시 비밀번호 저장
int tempPasswordCount = 0;
String inputPassword = "";
const int LED_PIN = 13;

void setup() {
  Serial.begin(9600);
  pinMode(LED_PIN, OUTPUT);
  
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Password:");
  
  Serial.println("Arduino started and ready!");
}

void clearInputDisplay() {
  lcd.setCursor(0, 1);
  lcd.print("                ");
  lcd.setCursor(0, 1);
}

void loop() {
  if (Serial.available() > 0) {
    String received = Serial.readStringUntil('\n');
    received.trim();
    
    if (received.startsWith("SET_PASSWORD:")) {
      String newPassword = received.substring(13);
      if (newPassword.length() == 6) {
        // 비밀번호 배열에 추가
        bool alreadyExists = false;
        for (int i = 0; i < tempPasswordCount; i++) {
          if (tempPasswords[i] == newPassword) {
            alreadyExists = true;
            break;
          }
        }
        
        if (!alreadyExists && tempPasswordCount < 10) {
          tempPasswords[tempPasswordCount] = newPassword;
          tempPasswordCount++;
          Serial.println("NEW_PASSWORD_ADDED:" + newPassword);
          
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("New Pass Set!");
          lcd.setCursor(0, 1);
          lcd.print(newPassword);
          delay(1000);
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("Password:");
          clearInputDisplay();
          
          blinkLED(3);
        }
      }
    }else if (received.startsWith("EXPIRE_PASSWORD:")) {
      String expiredPassword = received.substring(16);
      // 만료된 비밀번호 제거
      for (int i = 0; i < tempPasswordCount; i++) {
        if (tempPasswords[i] == expiredPassword) {
          // 해당 비밀번호 제거 및 배열 정리
          for (int j = i; j < tempPasswordCount - 1; j++) {
            tempPasswords[j] = tempPasswords[j + 1];
          }
          tempPasswordCount--;
          Serial.println("PASSWORD_EXPIRED:" + expiredPassword);
          break;
        }
      }
    }
  }

  char key = keypad.getKey();
  
  if (key) {
    if (key == 'D') {
      bool accessGranted = false;
      String usedPassword = "";
      
      // 마스터 비밀번호 확인
      if (inputPassword == masterPassword) {
        accessGranted = true;
      } else {
        // 임시 비밀번호 확인
        for (int i = 0; i < tempPasswordCount; i++) {
          if (inputPassword == tempPasswords[i]) {
            accessGranted = true;
            usedPassword = tempPasswords[i];
            
            // 사용된 비밀번호 제거 및 배열 정리
            for (int j = i; j < tempPasswordCount - 1; j++) {
              tempPasswords[j] = tempPasswords[j + 1];
            }
            tempPasswordCount--;

            // 서버에 비밀번호 사용 알림
            Serial.println("PASSWORD_USED:" + usedPassword);
            break;
          }
        }
      }
      
      if (accessGranted) {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Door Opened!!");
        blinkLED(2);
        delay(1500);
      } else {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Access Denied!");
        Serial.println("ACCESS_DENIED:" + inputPassword);
        blinkLED(1);
        delay(1500);
      }
      
      inputPassword = "";
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Password:");
      clearInputDisplay();
    
      
    } else if (key == 'C') {
      inputPassword = "";
      Serial.println("Input cleared");
      clearInputDisplay();
    } else if (key == 'A' || key == 'B' || key == '#' || key == '*') {
      // 무시
    } else {
      inputPassword += key;
      Serial.print("Current input: ");
      Serial.println(inputPassword);
      
      clearInputDisplay();
      lcd.setCursor(0, 1);
      lcd.print(inputPassword);
    }
  }
}

void blinkLED(int times) {
  for(int i = 0; i < times; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}