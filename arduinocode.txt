#include <Keypad.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

byte rowPins[ROWS] = {6, 7, 8, 9};
byte colPins[COLS] = {5, 4, 3, 2};

Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

String masterPassword = "1234";
String currentTempPassword = "";
String inputPassword = "";
const int LED_PIN = 13;

void setup() {
  Serial.begin(9600);
  pinMode(LED_PIN, OUTPUT);
  
  lcd.init();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Password:");
  
  Serial.println("Arduino started and ready!");
}

void clearInputDisplay() {
  lcd.setCursor(0, 1);
  lcd.print("                "); // 16개의 공백으로 두 번째 줄 지우기
  lcd.setCursor(0, 1);
}

void loop() {
  if (Serial.available() > 0) {
    String received = Serial.readStringUntil('\n');
    received.trim();
    
    if (received.startsWith("SET_PASSWORD:")) {
      String newPassword = received.substring(13);
      if (newPassword.length() == 6) {
        currentTempPassword = newPassword;
        Serial.println("New temp password set: " + currentTempPassword);
        
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("New Pass Set!");
        lcd.setCursor(0, 1);
        lcd.print(currentTempPassword);
        delay(1000);
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Password:");
        clearInputDisplay();
        
        blinkLED(3);
      }
    }
  }

  char key = keypad.getKey();
  
  if (key) {
    Serial.print("Key pressed: ");
    Serial.println(key);
    
    if (key == 'D') { // D를 확인 키로 사용
      // 비밀번호 확인
      Serial.print("Checking password: ");
      Serial.println(inputPassword);
      
      // 마스터 비밀번호 또는 임시 비밀번호 확인
      if (inputPassword == masterPassword || 
          (currentTempPassword.length() > 0 && inputPassword == currentTempPassword)) {
        Serial.println("Access granted!");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Access Granted!");
        blinkLED(2);
        delay(1500);
      } else {
        Serial.println("Access denied!");
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print("Access Denied!");
        blinkLED(1);
        delay(1500);
      }
      
      // 입력 초기화 및 디스플레이 재설정
      inputPassword = "";
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Password:");
      clearInputDisplay();
      
    } else if (key == 'C') { // C를 지우기 키로 사용
      inputPassword = "";
      Serial.println("Input cleared");
      clearInputDisplay();
    } else if (key == 'A' || key == 'B' || key == '#' || key == '*') {
      // A, B, #, * 키는 무시
    } else {
      // 숫자 키 입력 처리
      inputPassword += key;
      Serial.print("Current input: ");
      Serial.println(inputPassword);
      
      // LCD에 입력 표시 (이제 숫자 그대로 표시)
      clearInputDisplay();
      lcd.setCursor(0, 1);
      lcd.print(inputPassword);  // '*' 대신 실제 숫자 표시
    }
  }
}

void blinkLED(int times) {
  for(int i = 0; i < times; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(200);
    digitalWrite(LED_PIN, LOW);
    delay(200);
  }
}